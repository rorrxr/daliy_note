8장 상속과 다형성 
8-4 다형성

#상속

- 기존 클래스를 재사용
- 신규 클래스의 공통적인 부분

#프로젝트

1) 응용 프로그램 :   실행
		main() 메서드가 단 1개 존재해야 한다.

2) 라이브러리 : 	응용프로그램을 보조적으로 지원하는 목적
		main() 메서드가 존재하지 않아야 한다.

#다형성 259p
AnimalTest1, 2.java
ㅡㅡㅡㅡㅡㅡㅡ
8-6 다운캐스팅과 instanceof
ShapeTest.java

캐스팅(형변환)
- upcasting
큰 데이타타입 = (큰데이터타입)작은 데이터타입;

-downcasting
작은 데이타타입 = (작은 데이터타입)큰데이타타입;

//chapter8.polymophism

AnimalTest1.java
AnimalTest2.java
ShapeTest.java

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
9장 추상 클래스
//chapter9.abstractex
추상 클래스 : 일반 메서드와 추상메서드를 둘다 구성
인터페이스 : 추상메서드만 구성

완성 클래스

추상 클래스

void 메서드명(){ // head 원형
	//body 추상 메서드
}
~~~~~~~~~
예시

중앙 정부
- 정책(메서드)
교통정책 : 세부계획수립 완성
void 교통정책(){
	세부계획수립 완성;
}

출산정책 : 세부적인 내용
void 출산정책(){
}

지방 정부
출산 정책
	각 지자체에서 세부 계획 수립

//chapter9.abstractex 패키지의 소스코드

Computer.java
DeskTop.java
NoteBook.java
MyNoteBook.java
ComputerTest.java

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
9-2 템플릿 메서드
//chapter9.template

템플릿이란 용어를 사전에서 찾아보면 틀이나 견본을 뜻이다.
그래서 틀이 있는 메서드라고 볼 수 있다.

템플릿 메서드는 싱글톤 패턴과 같은 디자인 패턴의 한 방법으로 모든 객체지향 프로그램에서 사용하는 구현 방법이다. 
(따라서 이 구현 방법은 자바 뿐 아니라 C++, C#에서도 동일하게 적용된다.)

AICar.java
MenualCar.java
Car.java
CarTest.java

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
9장 Parent.java 상속 개념
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
10장 인터페이스 

인터페이스 : 클래스 혹은 프로그램이 제공하는 기능을 명시적으로 선언하는 역할
인퍼테이스는 추상 메서드와 상수로만 이루어져 있다.
구현된 코드가 없기 때문에 당연히 인터페이스로 인스턴스를 생성할 수 없다.

chapter10.Interfaceex
- Calc.java // 인터페이스 구현
- Calculator.java // Calc 인터페이스를 상속(implements)받고 add, sub 메서드 생성 및 정의
- CompleteCalc.java // Calculator를 상속(extends)받고 times, divide, showInfo 메서드 생성 및 정의
- CalculatorTest.java // main메서드로, Cal 인터페이스 그리고 Calculator 추상 클래스를 상속받은 CompleteCalc의 add, sub, times, divide, showInfo 호출

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
10-2인터페이스와 다형성

// chapter10.scheduler

Scheduler.java
RoundRobin.java
LeastJob.java
PriortyAllocation.java
SchedulerTest.java

# 예외처리 -> 12장에서 배울 예정
import java.io.IOException;
public static void main(String[] args) throws IOException{
	....
	int ch = System.in.read(); // 키보드를 통하여 키를 입력받는 기능을 제공. java.io.IOException 사용
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SchedulerTest 기능 추가 (유지보수
추가기능 클래스 : SampleTest
S or s

"예비 손님이 대기 중입니다."
"예삐 손님이 순서를 기다립니다."

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
디폴트 메서드 238p
정적 메서드 330p
private 메서드 331p

Calc.java
	default void description() {
		
	}
	
	private static void myStaticMethod() {
		System.out.println("private static 메서드입니다");
	}
	
	//jdk 1.9
	private void myMethod() {
		System.out.println("private 메서드입니다");

	}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
상속
- 클래스는 단 1개의 클래스만 상속이 가능하다(단일 상속)
비교 > C++ 언어는 

10-4 인터페이스 활용

# 클래스가 인터페이스를 상속

//chapter10.multiInterfaceex
Buy.java // 추상메서드 buy, 그리고 디폴트 메서드 order 인터페이스 정의
Sell.java // 추상메서드 sell, 그리고 디폴트 메서드 order 인터페이스 정의
Customer.java // Buy와 Sell 인터페이스를 상속받아 sell, buy, order 메소드 정의
CustomerTest.java // 부모 인터페이스 Buy, Sell로 메소드를 재정의 하고 호출, 그리고 다운캐스팅 하여 호출

# 인터페이스 상속
x.java // 추상 메서드 x 메서드를 포함한 인터페이스 정의
y.java // 추상 메서드 y 메서드를 포함한 인터페이스 정의
MyInterface.java // 인터페이스(x와 y)끼리 상속하는 인터페이스
MyClass.java // MyInterface 인터페이스를 상속받고 메서드 정의
MyClassTest.java // main() 메서드 구현, MyClass를 상속