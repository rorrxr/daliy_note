15-3 바이트 단위 스트림 521p // chapter15.stream.inputstream

ScannerTest.java
FileTest.java
SystemInTest1.java
SystemInTest2.java
~~~
FileInputStreamTest1.java
FileInputStreamTest2.java
FileTest.java
FileInputTest3.java
FileInputStream3.java


//chapter15.stream.outputstream
FileOuputStreamTest1.java
FileOuputStreamTest2.java
FileOuputStreamTest3.java

15-4 문자단위 스트림 534p
 
// chapter15.stream.reader
#FileReaderTest.java

// chapter15.stream.writer
FileWriterTest.java
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\
15-5 보조스트림 539p // chapter15.stream.decorator

# 541p InputStreamReader 사용하기
InputStreamReaderTest.java

# Buffered 스트림 
BufferedStreamTest.java // 파일 복사하기

버퍼 사용안함 : 파일 복사시간 1749 milsecond 소요됨(1.7초)
버퍼 사용함 : 파일 복사시간 15milsecond 소요됨.(0.15초)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 오후 시간
15-6 직렬화 550p

// chapter15.stream.serialization
SerializationTest.java

package chapter15.stream.serialization;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

// 객체 직렬화 역직렬화
// 객체(인스턴스) 상태를 파일로 저장, 네트워크 전송시 사용하는 기술.
// 직렬화로 사용하는 객체의 클래스는 Serializable 인터페이스를 구현해야 한다.
// 직렬화 클래스 : ObjectInputStream ObjectOutputStream 클래스
class Person implements Serializable{
	private static final long serialVersionUID = 1;
	
	String name;
	transient String job; // 직렬화 대상에서 제외.
	
	public Person() {
		
	}
	
	public Person(String name, String job) {
		this.name = name;
		this.job = job;
	}
	
	public String toString() {
		return name + "," + job;
	}
}

public class SerializationTest {

	public static void main(String[] args) throws ClassNotFoundException {
		// 직렬화로 사용할 객체 생성
		Person personHong = new Person("홍길동", "의적");
		Person personSon = new Person("손흥민", "축구선수");
		
		try (
				FileOutputStream fos = new FileOutputStream("serial.out");
				ObjectOutputStream oos = new ObjectOutputStream(fos);
			){
				// 객체 상태를 serial.out 파일에 저장, 값을 파일에 저장하여 직렬화.
				oos.writeObject(personSon);  
				oos.writeObject(personHong);
		}catch(IOException e) {
			e.printStackTrace();
		}
		
		// 역직렬화로 사용할 객체 생성
		try(
				FileInputStream fis = new FileInputStream("serial.out");
				ObjectInputStream ois = new ObjectInputStream(fis);
		){
			// 역직렬화 작업.. serialVersionUID 필드 체크
			Person p1 = (Person)ois.readObject(); //personHong
			Person p2 = (Person)ois.readObject(); //personSon

			System.out.println(p1);
			System.out.println(p2);
		}catch(IOException e) {
			e.printStackTrace();
		}
	}

}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 직렬화 테스트 하기

package chapter15.stream.serialization;

import java.io.Externalizable;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;

//  ExternalizableTest.java 직렬화 예제
/*
 1) Serializable : 단순하게 객체 상태 정보를 읽고 쓰는데 사용.
 2) Externalizable : 개발자가 구현해야 할 구현(재정의)메서드가 존재. 
 */

class Dog implements Externalizable{
	String name;
	
	public Dog() {}
	
	@Override
	public void writeExternal(ObjectOutput out) throws IOException{
		// 필드를 저장 시 디테일한 작업을 하고자 할 때 사용.
		
		out.writeUTF(name);
	}
	
	@Override
	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
		// 필드를 저장 시 디테일한 작업을 하고자 할 때 사용.
		
		name = in.readUTF();
	}
	
	public String toString() {
		return name;
	}
}

public class ExternalizableTest {

	public static void main(String[] args) throws IOException, ClassNotFoundException {
		Dog myDog = new Dog();
		myDog.name = "멍멍이";
		
		FileOutputStream fos = new FileOutputStream("external.out");
		ObjectOutputStream oos = new ObjectOutputStream(fos);
		
		try(fos; oos){
			oos.writeObject(myDog);
		}catch(IOException e) {
			e.printStackTrace();
		}
		
		FileInputStream fis = new FileInputStream("external.out");
		ObjectInputStream ois = new ObjectInputStream(fis);
		
		Dog dog = (Dog)ois.readObject();
		System.out.println(dog);
	}

}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
chapter16 책에 없는 예제 - 이것이자바다 :  멀티스레드
교안 : 네이버카페 - 자바 게시판 - <자바 스레드 PPT Source - this is java 참조> 
소스파일 : 네이버카페 - 자바 게시판 - <스레드 - 12월14일>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1절 : 프로세스와 스레드
메인 스레드
- 모든 자바 프로그램은 메인 스레드가 main() 메소드
-main()메소드의 첫 코드부터 아래로 순차적으로 실행
- 실행 종료 조건
1) 마지막 코드 실행
2) return 문을 만나면 

main 스레드는 작업 스레드들을 만들어 병렬로 코드들 실행
-멀티 스레드 생성해 멀티 태스킹 수행

프로세스의 종료
1)싱글 스레드: 메인 스레드가 종료하면 프로세스도 종료
2)멀티 스레드: 실행 중인 스레드가 하나라도 있다면, 프로세스 미종료


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
프로세스 : 실행중인 프로그램
- 운영체제에서 제공하는 메모리를 할당받아 동작하는 프로그램

//chapter16.sec02
BeepTask.java

프로세스
 스레드 : 자바기준. main() 메서드를 관리하는 이름도 동일한 main 스레드를 기본적으로 제공
 * */

BeepPrintExample1.java
package chapter16.sec02;

public class BeepPrintExample1 {

	public static void main(String[] args) {
		// 기능
		for(int i = 0; i < 5; i++) {
			System.out.println("홀수");
		}
		
		// 기능 main 메서드에 영향을 받지 않고 독립적으로 실행을 가능하게 할려면
		// 아래 코드에 새로운 스레드를 생성하여 관리받게 한다
		for (int i = 0; i < 5; i++) {
			System.out.println("짝수");
		}
	}

}
2절 작업 스레드 생성과 실행
멀티 스레드로 실행하는 어플리케이션 개발
몇 개의 작업을 병렬로 실행할지 결정하는 것이 선행되어야
[사진]

작업 스레드 생성 방법
Thread 클래스로부터 직접 생성 (p.579~582)
Runnable을 매개값으로 갖는 생성자 호출
Thread 하위 클래스로부터 생성 (p.583~586)
Thread 클래스 상속 후 run 메소드 재정의 해 스레드가 실행할 코드 작성



3절 스레드 우선순위

BeepPrinExample2, 3.java

스레드 우선순위

멀티 스레드로 실행하는 어플리케이션 개발
몇 개의 작업을 병렬로 실행할지 결정하는 것이 선행되어야

작업 스레드 생성 방법
Thread 클래스로부터 직접 생성 (p.579~582)
Runnable을 매개값으로 갖는 생성자 호출
Thread 하위 클래스로부터 생성 (p.583~586)
Thread 클래스 상속 후 run 메소드 재정의 해 스레드가 실행할 코드 작성

2절 작업 스레드 생성과 실행
메인 스레드 이름: main
작업 스레드 이름 (자동 설정) : Thread-n
=> thread.getName();
작업 스레드 이름 변경
=> thread.setName("스레드 이름")
코드 실행하는 현재 스레드 객체의 참조 얻기
=>Thread thread = Thread.currentThread();

//sec02.threadname

# ThreadNameExample.java

package chapter16.sec02.threadname;

public class ThreadNameExample {

	public static void main(String[] args) {
		// 아래 코드가 실행이 되면, main() 메서드를 관리하는 메인 스레드 객체를 참조.
		Thread mainThread = Thread.currentThread();
		System.out.println("프로그램 시작 스레드 이름 : " + mainThread.getName());
		
		ThreadA threadA = new ThreadA();
		System.out.println("작업 스레드 이름 : " + threadA.getName());
		threadA.start(); // 실행 대기상태(cpu 점유를 받을 수 있는 상태)
		
		ThreadB threadB = new ThreadB();
		System.out.println("작업 스레드 이름 : " + threadB.getName()); // 작업스레드 기본 이름
		threadB.start(); // 실행 대기 상태
	}

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#ThreadA.java

package chapter16.sec02.threadname;

public class ThreadA extends Thread{
	public ThreadA() {
		setName("ThreadA");// 스레드 이름 지정
		
	}
	
	// getName : 스레드 이름 확인	
	public void run() {
		for(int i = 0; i < 2; i++) {
			System.out.println(getName() + "가 출력한 내용");
		}
	}
	
}

~~~~~~~~~~~~~~~~~~
#ThreadB .java

package chapter16.sec02.threadname;

public class ThreadB extends Thread {

	// getName : 스레드 이름 확인
	
	public void run() {
		for(int i = 0; i < 2; i++) {
			System.out.println(getName() + "가 출력한 내용");
		}
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//chapter16.sec02.priority

#CalcThread.java

package chapter16.sec02.priority;

// 스레드로 사용할 클래스
public class CalcThread extends Thread {

	// 생성자 매개변수를 이용하여 스레드 이름 정의하기.
	public CalcThread(String name) {
		setName(name);
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 2000000000; i++) {
		
		}
		System.out.println(getName());
	}
}

#PriorityExample.java

package chapter16.sec02.priority;

public class PriorityExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// 작업자 스레드 10개 생성
		for(int i = 0; i <= 10; i++) {
			Thread thread = new CalcThread("thread" + i);
			// 10번째 스레드 객체만 우선순위 1, 1~9번째 스레드 객체는 10
			if(i != 10) {
				thread.setPriority(Thread.MIN_PRIORITY);
			}else {
				thread.setPriority(Thread.MAX_PRIORITY);
			}
			thread.start();
		}
	}
}
