SQL PLUS
- 오라클 데이터베이스 서버를 접속하기 위한 텍스트 기반의 접속 프로그램

ㅡㅡㅡㅡㅡ
계정 생성 오류 수정
https://jieun0113.tistory.com/72

-- 계정 생성
CREATE USER shop IDENTIFIED BY '1234'

-- 권한 부여
GRANT CONNECT, RESOURCE, DBA TO shop; // connect와 resource, dba 권한을 사용자 shop에 부여하겠다

개발자 관점
관리자 관점

imp

imp ora_user/1234 file=expall.dmp log=empall.log ignore=y grants=y rows=y indexes=y full=y
imp ora_user/1234 file=expcust.dmp log=expcust.log ignore=y grants=y rows=y indexes=y full=y

~~~~~~~~
SELECT employee_id, EMP_NAME FROM EMPLOTEES;

-- ORA_USER 스키마의 테이블 정보 확인
SELECT TABLE_NAME FROM USER_TABLES;

-- 사원 테이블에서 급여가 5000이 넘는 사원번호와 사원명을 조회
/*
SELECT 컬럼명, 컬럼명, 컬럼명 FROM 테이블명;
*/

-- 모든 컬럼명 의미
SELECT * FROM employees;

SELECT employee_id, EMP_NAME FROM EMPLOYEES;

-- 급여가 5000이상인 사원 혹은 JOB_ID값이 IT_PROG인 사원 조회
SELECT employee_id, EMP_NAME FROM EMPLOYEES -- 107건
WHERE SALARY >= 5000 OR JOB_ID = 'IT_PROG'; -- 61건

-- 대소문자 구분 확인
SELECT employee_id, emp NAME FROM EMPLOYEES
WHERE SALARY >= 5000 OR JOB_ID = "it_prog'; -- 문자열 데이타는 대소문자 유의

-- 원 컬럼명 AS 컬럼별칭
SELECT employee_id AS E_ID, EMP_NAME AS E_NAME FROM EMPLOYEES --107
WHERE SALARY >= 5000 OR JOB_ID = 'IT_PROG';

-- AS 생략
SELECT employee_id AS E_ID, EMP_NAME E_NAME FROM EMPLOYEES --107
WHERE SALARY >= 5000 OR JOB_ID = 'IT_PROG';

-- "테이블명.컬럼명" 형태
SELECT EMPLOYEES.employee_id, EMPLOYEES.EMP_NAME FROM EMPLOYEES --107
WHERE SALARY >= 5000 OR JOB_ID = 'IT_PROG';

-- 테이블명 1개 사용시 생략 가능
SELECT employee_id, EMP_NAME FROM EMPLOYEES --107
WHERE SALARY >= 5000 OR JOB_ID = 'IT_PROG';

-- INSERT INTO [스키마].테이블명 (컬럼1, 컬럼2, ...) VALUES (값1, 값2, ...);
-- 테이블에 데이터를 삽입하는 명령어

-- 테이블 생성
CREATE TABLE ex3_1(
	col1 VARCHAR(10),
	col2 NUMBER,
	col3 DATE	);

/*
-- 테이블 생성 문법
CREATE TABLE 테이블명(
	컬럼명 데이타타입,
	컬럼명 데이타타입,
	컬럼명 데이타타입
);
*/

CREATE TABLE ex3_1(
	col1	varchar2(10),
	col2	number,
	col3	DATE	);

-- 데이터 조회
SELECT * FROM ex3_1;

-- 데이터 삽입
-- 스키마명 생략 : ora_user 계정으로 접속 시 스키마명을 생략 가능하다.
INSERT INTO ex3_1 (col1, col2, col3) VALUES ('ABC', 10, SYSDATE);

-- 스키마 사용 : ORA_USER
-- SYSDATE : 날짜값을 읽어오는 함수
INSERT INTO ORA_USER.ex3_1(col1, col2, col3) values ('ABC', 10, SYSDATE);


select * from ex3_1;

--입력하는 컬럼의 순서를 변경가능.
-- 입력하는 컬럼명과 값이 개수가 일치. 데이터타입 일치
INSERT INTO ex3_1 (col3, col1, col2) VALUES(SYSDATE, 'DEF', 20);

SELECT * FROM EX3_1;

-- 컬럼의 데이터타입에 일치하지 않는 데이터 사용시 에러 발생. COL3 컬럼명이 DATE타입인데 NUMBER 숫자 데이터를 삽입해서 에러 발생

INSERT INTO ex3_1(col1, col2, col3) VALUES('ABC', 10, 30);

-- 컬럼명 생략시 테이블의 모든 컬럼명을 가리킨다.
INSERT INTO ex3_1 VALUES('GHI', 10, SYSDATE); -- ex3_1 (col1, col2, col3)

-- ex3_1테이블에는 컬럼명이 3개 존재
-- 입력하는 컬럼명을 생략할 수 없다. 컬럼명이 num 허용이 되어있을 때 가능
INSERT INTO ex3_1 (col1, col2) VALUES('GHI', 20); -- col3 컬럼명이 NULL이라서 생략 가능

SELECT * FROM ex3_1;

COMMIT; -- 현재 INSERT 명령을 한 데이터를 물리적으로 반영
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
CREATE TABLE ex3_2(
    emp_id  NUMBER,
    emp_name VARCHAR2(100)
);

INSERT INTO ex3_2(emp_id, emp_name)
SELECT employee_id, emp_name
FROM employees
where salary > 5000;


select * from ex3_2;

select * from ex3_1;

INSERT INTO ex3_1(col1, col2, col3) VALUES (10, '10', '2014-01-01'); -- 타입 자동형 변환

-- 테이블의 col2 컬럼의 모든 데이터를 50으로 변경
UPDATE ex3_1 SET col2 = 50;

update 테이블명 set 컬럼명 = 수정값;

rollback; -- 현재까지 작업한 insert, update, delete 명령어 작업을 취소한다.

update ex3_1 set col2 = 50, col3 = '2021-01-23'
where col2 = 20;

-- merge 명령어 : 나중에 후반에서 설명한다.


delete ex3_1 where col1 = 'GHI';
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
SQL - 데이터베이스 프로그래밍
: Structured Query Language(구조적 질의 언어)

DML - 데이터 조작어
- select, insert, update, delete, merge

DDL

DCL
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
CREATE TABLE MEMBER(
	U_ID	VARCHAR2(20),
	U_PW	VARCHAR2(20),
	U_NAME	VARCHAR2(20),
	U_ADDR	VARCHAR2(100),
	U_AGE	NUMBER
);

-- 입력데이터
-- user01, 1234, 홍길동 서울시 노원구 100 입력
INSERT INTO MEMBER VALUES('user01', '1234', '홍길동', '서울시 노원구', 100);

--user02, 1234, 손흥민 영국 런던 (나이 없이) 입력
-- INSERT INTO MEMBER(U_ID, U_PW, U_NAME, U_ADDR) VALUES('user02', '1234', '손흥민', '영국 런던');

--user02, 1234, 손흥민 영국 런던 32 입력
INSERT INTO MEMBER VALUES('user02', '1234', '손흥민', '영국 런던', 32);

-- 손흥민의 나이를 32 -> 35로 변경. 주소는 서울시 강남구 로 변경 조건식 아이디 사용
UPDATE MEMBER 
    SET U_AGE = 35, U_ADDR = '서울시 강남구'
WHERE U_NAME = '손흥민';

-- 홍길동 데이터 삭제 조건식 사용
DELETE MEMBER WHERE U_NAME = '홍길동';

/*
의사컬럼  : 테이블의 컬럼처럼 동작하지만 실제로 테이블에 존재하지 않는 컬럼을 말한다.
문법은 컬럼명처럼 사용하지 않는다. 명령어 특징이 있다.
*/

-- ROWNUM
SELECT ROWNUM, employee_id FROM employee;

-- ROWNUM 조건식
SELECT ROWNUM, employee_id FROM employee
WHERE ROWNUM < 5;


-- 특정 범위에 해당하는 용도로 사용 (ROWNUM이 5~100범위 출력)
-- 처리방법은 인라인 뷰(inline view)를 사용해야 한다.
SELECT ROWNUM, employee_id FROM employees WHERE ROWNUM >= 5 AND ROWNUM <= 10;

-- 문자 연산자 : ||
SELECT employee_id || '-' || emp_name AS employee_info
FROM employees
WHERE ROWNUM < 5;

-- 수식 연산자 : +, -, *, /
-- 숫자 데이터 또는 컬럼에 사용
select employee_id, EMP_NAME, SALARY from employees;
select employee_id, EMP_NAME, SALARY, SALARY * 0.9 as realsalary from employees;

/*

CASE 문 : 테이블에 존재하는 데이터를 근거로 하여, 결과값을 생성하고자 할 때 사용.
CASE WHEN 조건1 THEN 조건2
WHEN 조건2 THEN 조건2
...
ELSE 기타값
END
*/
-- 사원 테이블에서 각 사원 급여에 따라 5000이하로 급여를 받는 사원은 C, 5000~15000은 B, 15000이상은 A등급을 반환하는 쿼리
SELECT employee_id, salary,
            CASE WHEN salary <= 5000 THEN 'C등급'
                 WHEN salary > 5000 AND salary <= 15000 THEN 'B등급'
            ELSE 'A등급'
END AS salary_grade
FROM employees;


SELECT employee_id, salary,
            CASE WHEN salary <= 5000 THEN 'C등급'
                 WHEN salary > 5000 AND salary <= 15000 THEN 'B등급'
            ELSE 'A등급'
END AS 컬럼 별칭
FROM employees;

-- CASE TYPE 2
SELECT
CASE 컬럼명
WHEN 값1 THEN '결과'
WHEN 값2 THEN '결과'
WHEN 값3 THEN '결과'
END AS 별칭
FROM 테이블명;

SELECT * FROM DEPARTMENTS;

SELECT
    CASE DEPARTMENT_ID
        WHEN 10 THEN '서울'
        WHEN 20 THEN '부산'
        WHEN 30 THEN '대구'
        ELSE '기타'
    END AS CITY
FROM DEPARTMENTS;

-- OR로 
SELECT employee_id, salary
FROM employees
WHERE salary = ANY (2000, 3000, 4000)
ORDER BY employee_id;

- ALL은 모든 조건을 동시에 만족해야 한다.
-- 급여가 2000, 3000, 4000 모두에 해당되는 사원을 조회하므로 조회되는 데이터가 없다.

SELECT employee_id, salary
FROM employees
WHERE salary = ALL (2000, 3000, 4000)
ORDER BY employee_id;

-- AND로 변환

SELECT employee_id, salary
FROM employees
WHERE salary = 2000 AND salary = 3000 AND salary = 4000
ORDER BY employee_id;

-- 마지막으로 알아볼 SOME은 ANY와 동일하게 사용되며 동작한다.
SELECT employee_id, salary
FROM employees
WHERE salary = SOME (2000, 3000, 4000)
ORDER BY employee_id;

-- 논리 조건식은 조건절에서 AND, OR, NOT을 사용하는 조건식을 말한다.

-- NOT으로 급여가 2500보다 크거나 같지 않은 사원, 즉 급여가 2500 이하인 사원을 반환하고 있다.

-- 급여가 2500 미만 사원
-- 1)
SELECT employee_id, salary
    FROM employees
    WHERE NOT(salary >= 2500)
    ORDER BY employee_id;

-- 2)
SELECT employee_id, salary
    FROM employees
    WHERE salary < 2500
    ORDER BY employee_id;

-- 1) 2)번 동일한 결과이다. 데이터의 분포도에 따라 성능이 다를 수 있다.

-- 컬럼에 null과 not null을 확인할 때 사용
SELECT * FROM EMPLOYEES;

-- COMMISION_PCT 컬럼이 NULL인 데이터 조회
SELECT employee_id, EMP_NAME, SALARY, COMMISION_PCT
FROM EMPLOYEES
WHERE COMMISION_PCT IS NULL;

-- COMMISION_PCT 컬럼이 NOT NULL인 데이터 조회
SELECT employee_id, EMP_NAME, SALARY, COMMISION_PCT
FROM EMPLOYEES
WHERE COMMISION_PCT IS NOT NULL;


-- >= 와 <= 논리연산자로 변환이 가능하다. 다음 급여가 2000에서 2500 사이에 해당하는 사원을 조회하는 쿼리다.

SELECT employee_id, salary
FROM employees
WHERE salary BETWEEN 2000 AND 2500
ORDER BY employee_id;


SELECT employee_id, salary
FROM employees
WHERE salary >= 2000 AND salary <= 2500
ORDER BY employee_id;

-- IN 조건식은 조건절에 명시한 값이 포함된 건을 반환하는데 앞에서 배웠던 ANY와 비슷하다
SELECT employee_id, salary
FROM employees
WHERE salary IN(2000, 3000, 4000)
ORDER BY employee_id;

-- OR로 변환

SELECT employee_id, salary
FROM employees
WHERE salary = 2000 OR salary = 3000 OR salary = 4000)
ORDER BY employee_id;

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

와일드카드 문자 : %, _

% : 0개 이상인 문자열

WHERE 컬럼명 LIKE '%_'
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

SELECT emp_name
FROM employees
WHERE emp_name LIKE 'A%'
ORDER BY emp_name;

SELECT emp_name
FROM employees
WHERE emp_name LIKE 'A1%'
ORDER BY emp_name;

CREATE TABLE ex3_5(
    names varchar2(30)
);

INSERT INTO ex3_5 VALUES('홍길동');
INSERT INTO ex3_5 VALUES('홍길용');
INSERT INTO ex3_5 VALUES('홍길상');
INSERT INTO ex3_5 VALUES('홍길상동');
INSERT INTO ex3_5 VALUES('홍길');

SELECT * from ex3_5
where names like '홍길%';

SELECT * from ex3_5
where names like '홍길_'; -- 총 3글자. 3번째 문자는 어떤 문자가 와도 상관이 없다.

-- 데이터베이스 함수
-- 숫자 함수
/*
1. ABS(n)
ABS 함수는 매개변수로 숫자를 받아 그 절대값을 반환하는 함수다.
*/

SELECT ABS(10), ABS(-10), ABS(-10.123) FROM DUAL;

-- 2. CEIL(n)과 FLOOR(n)
-- CEIL 함수는 매개변수 n과 같거나 가장 큰 정수를 반환한다. 소수 부분이 존재한다면, 무조건 올림처리한다.
SELECT CEIL(10.123), CEIL(10.541), CEIL(11.001) FROM DUAL;

-- FLOOR 함수는 CEIL함수와는 반대로 매개변수 n보다 작거나 가장 큰 정수로 반환한다. 소수 부분을 버린다.
SELECT FLOOR(10.123), FLOOR(10.541), FLOOR(11.001) FROM DUAL;

-- ROUND 함수는 매개변수 n을 소수점 기준 (i + 1)번쨰 반올림한 결과를 반환한다.
-- i는 생략할 수 있고, 디폴트 값은 0, 즉 소수점 첫번째 자리에서 반올림
SELECT ROUND(10.154), ROUND(10.541), ROUND(11.001) FROM DUAL;

-- 2번쨰 매개변수가 양수일 경우 소수 첫째자리가 반올림에 결과가 된다.
SELECT ROUND(10.154, 1), ROUND(10.154, 2), ROUND(10.154, 3) FROM DUAL;

-- 2번쨰 매개변수가 음수일 경우 소수 첫째자리가 반올림에 결과가 된다.
SELECT ROUND(0, 3), ROUND(115.155, -1), ROUND(115.155, -2) FROM DUAL;

-- TRUNC 함수는 반올림을 하지 않고 n1을 소수점 기준 n2자리에서 무조건 잘라낸 결과를 반환한다. 
-- n2 역시 생략할 수 있으며 디폴트 값은 0이고, 양수일 때는 소수점 기준으로 오른쪽, 음수일 때는 소수점 기준 왼쪽 자리에서 잘라낸다.

-- 지정된 자리수에 해당되는 부분을 잘라내야 한다.
SELECT TRUNC(115.155), TRUNC(115.155, 1), TRUNC(115.155, 2), TRUNC(115.155, -2) FROM DUAL;