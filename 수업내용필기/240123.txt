스레드 우선순위


동시성과 병렬성 8p

#동시성
- 멀티 작업 위해 하나의 코어에서 멀티 스레드가 번갈아 가며 실행하는 성질
#병렬성
- 멀티 작업을 위해 멀티 코어에서 개별 스레드를 동시에 실행하는 성질

스레드의 이름 (7p.

메인 스레드 이름: main
작업 스레드 이름 (자동 설정) : Thread-n

작업 스레드 이름 변경

코드 실행하는 현재 스레드 객체의 참조 얻기

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

자바의 스레드 스케줄링 (p.588~590)
우선 순위(Priority) 방식과 순환 할당(Round-Robin) 방식 사용

우선 순위 방식 (코드로 제어 가능)
우선 순위가 높은 스레드가 실행 상태를 더 많이 가지도록 스케줄링
1~10까지 값을 가질 수 있으며 기본은 5


순환 할당 방식 (코드로 제어할 수 없음)
시간 할당량(Time Slice) 정해서 하나의 스레드를 정해진 시간만큼 실행

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

공유 객체를 사용할 때의 주의할 점
멀티 스레드가 하나의 객체를 공유해서 생기는 오류 (p.591~593)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
스레드 상태 제어 17p

주어진 시간 동안 일시 정지 - sleep() 
// chapter16.sec02.sleep
SleepExample.java

Thread.sleep(밀리세컨드)

- 얼마 동안 일시 정지 상태로 있을 것인지 밀리 세컨드(1/1000) 단위로 지정
- 일시 정지 상태에서 interrupt() 메소드 호출
	=> InterruptedException 발생


~~~~~~~~~~~~~~~~~~~~~~~~~~~
스레드 상태 제어 18p

다른 스레드에게 실행 양보 - yield()
Ex) 무의미한 반복하는 스레드일 경우 
//chapter16.sec02.yield	

ThreadA.java
ThreadB.java
YieldExample.java

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
스레드 상태 제어 19p

다른 스레드의 종료를 기다림 - join()


계산 작업을 하는 스레드가 모든 계산 작업 마쳤을 때, 결과값을 받아 이용하는 경우 주로 사용
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

스레드
- 메인 스레드
- 보조 스레드 : 데몬 스레드

워드 프로그램
- 자동저장 : 5분 간격 저장
- 화면 새로고침

@ 데몬 스레드 23p

데몬(daemon) 스레드
주 스레드의 작업 돕는 보조적인 역할 수행하는 스레드
주 스레드가 종료되면 데몬 스레드는 강제적으로 자동 종료
워드프로세서의 자동저장, 미디어플레이어의 동영상 및 음악 재생, GC

스레드를 데몬 스레드로 만들기 
주 스레드가 데몬이 될 스레드의 setDaemon(true) 호출
반드시 start() 메소드 호출 전에 setDaemon(true) 호출
 그렇지 않으면 IllegalThreadStateException이 발생

현재 실행중인 스레드가 데몬 스레드인지 구별법
isDaemon() 메소드의 리턴값 조사 – true면 데몬 스레드

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
프로젝트를 위한 분석자료, 내용
-자바 프로그래밍 코딩 가능

# 처음=>교재책반복
# 자바 선공부 학습자 => 교재책 반복할 필요없다. 자바 연습문제

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
