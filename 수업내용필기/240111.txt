자바 프로그래밍 연산자

증감 연산자 74page
++num
--num
num++
num--
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package chapter3.operator;

public class OperationEx2 {
	public static void main(String[] args) {
		// 증감연산자, ++ or --
		// 변수 앞 또는 뒤에 사용하여, 동작 순서가 달라진다.
		
		int gameScore = 150;
		
		// gameScore에 + 1을 한 값을 저장하여, gameScore 변수값을 읽어와서 좌측 변수에 대입
		int lastScore1 = ++gameScore; // 151
		
		System.out.println(lastScore1);
		
		int lastScore2 = --gameScore; // 150
		System.out.println(lastScore2);
		
		int myAge = 27;
		boolean value = (myAge > 25); 
		System.out.println(value);
		
		
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package chapter3.operator;

public class OperationEx2_2 {
	public static void main(String[] args) {
		// 증감연산자, ++ or --
		// 변수 앞 또는 뒤에 사용하여, 동작 순서가 달라진다.
		
		int gameScore = 150;
		
		// gameScore변수값을 읽어와서 좌측 변수에 대입 후, gameScore에 + 1값을 한 값을 저장
		int lastScore1 = gameScore++; // 150
		System.out.println(lastScore1);
		
		int lastScore2 = --gameScore; // 150
		System.out.println(lastScore2);
		
		int myAge = 27;
		boolean value = (myAge > 25); // myAge가 25보다 큰지 아닌지 True or False로
		System.out.println(value);
		
		
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
w3cschool Java Operatiors
https://www.w3schools.com/java/java_operators.asp

A list of all assignment operators:
Operator	Example	Same As	Try it

참고
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

논리 연산자 77page

package chapter3.operator;

public class OperationEx3 {
	public static void main(String[] args) {
		// 논리 연산자, && || !
		// 논리 연산자, && or || 사용시 우측의 코드가 항상 실행되는 것은 아니다. (중요)
		
		int num1 = 10;
		int i = 2;
		
		// num1에 10을 더한 값이 10보다 큰지, 그리고 i에 2를 더한 값이 10보다 큰 것을 비교
		
		// 좌측 && 우측
		// 좌측이 false이면 우측 true or false에 상관없이 결과는 false되는 구조이므로
		// 우측은 코드가 실행되지 않는다.
		boolean value = (num1 = num1 + 10) < 10 && (i = i + 2) < 10;
		// F & F = False
		// T & F = False
		// T & T = True
		
		System.out.println(value); // F & T = False
		System.out.println(num1); // 20
		System.out.println(i); // 일반적인 예상은 4로 생각할 수 있으나, && 우측 코드가 실행이 안 되어 2 값이 출력된다.
		
		// 좌측 || 우측
		// 좌측이 true이면, 우측이 true or false 상관없이 true가 되는 구조이므로
		// 우측은 코드가 실행되지 않는다.
		value = (num1 = num1 + 10) > 10 || (i + 2) < 10;
		// T || F = True
		// T || T = True
		// F || T = False
		// F || F = False
		
		System.out.println(value); // T || F = true
		System.out.println(num1); // 30
		System.out.println(i); // 일반적인 예상은 4로 생각할 수 있으나, || 우측 코드가 실행이 안 되어 2 값이 출력된다.
		
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

삼항 연산자, 조건 연산자 81page

package chapter3.operator;

public class OperationEx4 {

	public static void main(String[] args) {
		// 조건 연산자 (삼항 연산자)
		// if ~ else 구문과 유사한 특징.
		
		int fatherAge = 45;
		int motherAge = 47;
		
		char ch;
		// 앞의 조건식이 True이면, ch 변수에 "T" 대입, False이면 ch 변수에 "F" 대입;
		ch = (fatherAge > motherAge) ? 'T' : 'F'; // false, ch = F
		
		System.out.println(ch);
	}
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

비트 연산자 83page

package chapter3.operator;

public class OperationEx5 {

	public static void main(String[] args) {
		// 비트 연산자 : 일반적인 개발에서는 사용 빈도수가 적다.
		// << >> >>>
		
		// 정수형 변수 : 10진수, 16진수, 8진수, 2진수 형태로 값을 사용할 수가 있다.
		//0B(2진수) => 2진수 값으로 표현하여라
		int num = 0B10000101; // 2진수값을 8비트로 표현 
		
		System.out.println(num << 2); // num 변수의 비트 데이터가 좌측으로 2개씩 이동
		System.out.println(num >> 2); // num 변수의 비트 데이터가 우측 2개씩 이동
		//위의 코드와 차이점은 부호비트와 상관없이 무조건 0으로 채움
		System.out.println(num >>> 2); // num 변수의 비트 데이터가 우측 2개씩 이동
		System.out.println(num);
		
		num = num << 2;
		System.out.println(num);
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
4장 제어문
4-1. 조건문 if문

package chapter4.ifexample;

public class IfExample {
	public static void main(String[] args) {
		// 제어문 : if 구문
		
		boolean isMarried = true;
		
		// 조건식이 true이면 11번줄이 실행이 되고, false이면 실행되지 않는다.
		if(isMarried) {
			System.out.println("기혼입니다.");
		}
		
		boolean isEven;
		int num = 10;
		// num 변수의 값이 2의 배수이면 true, 아니면 false를 대입한다.
		isEven = (num % 2 == 0) ? true : false;
		System.out.println(isEven);
		
		int sum;
		int num2;
		for (num2 = 1, sum = 0; ; num2++) { // 무한루프 (;{공백];)
			sum += num2;
			if (sum > 500) break; // if 조건식이 true이면 break문이 for문을 탈출 (종료)
		}
		System.out.println(sum);
		System.out.println(num2);
		
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

If-else문 97page
package chapter4.ifexample;

public class IfExample2 {
	public static void main(String[] args) {
		// 제어문 : 다중 if문
		// 디버깅 : 프로그램의 오류를 찾는 작업
		
		// 단축키
		// F5 : 한줄씩 진행되면 함수 안이면 함수 안으로 들어갑니다.
		// F6 : 한줄씩 진행하되 함수 호출은 건너뜁니다.
		// F7 : 현재 함수 끝까지 바로 가서 함수 호출부로 되돌아갑니다.
		// F8 : 다음 브레이크 포인트까지 건너뜁니다.
		
		// 라인 좌측에 표시되는 동그라미 : 중단점(Break Point)
		// 중단점 라인에서 코드가 실행되지 않고 일시정지가 된다.
		
		int age = 9; 
		int charge;
		
		if(age < 8) {
			charge = 1000;
			System.out.println("미취학 아동입니다.");
		}else if(age < 14) {
			charge = 2000;
			System.out.println("초등학생입니다");
		}else if(age < 20) {
			charge = 2500;
			System.out.println("중학생입니다");
		}else {
			charge = 3000;
			System.out.println("일반인입니다");
		}
		
		System.out.println("입장료는 " + charge + "원 입니다.");
	}
}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Switch문 101 page

package chapter4.ifexample;

public class SwitchCase {

	public static void main(String[] args) {
		// 선택문 : switch
		
		int ranking = 1; // 1, 2, 3 기타 이외의 값
		char medalColor; 
		
		// Ranking 변수가 갖게 되는 경우의 수를 case 값으로 작업을 한다.
		switch(ranking) {
		case 1: 
			medalColor = 'G';
			break;
		case 2: 
			medalColor = 'S';
			break;
		case 3: 
			medalColor = 'B';
			break;
		default: 
			medalColor = 'A';
		}
		System.out.println(ranking + "등 메달의 색깔은 " + medalColor + " 입니다.");
	}

}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package chapter4.ifexample;

public class SwitchCase_2 {

	public static void main(String[] args) {
		// 선택문 : switch
		
		String medal = "Gold"; 
		
		// Ranking 변수가 갖게 되는 경우의 수를 case 값으로 작업을 한다.
		switch(medal) {
		case "Gold": 
			System.out.println("메달의 색깔은 금메달입니다.");
			break;
		
		case "Silver": 
			System.out.println("메달의 색깔은 은메달입니다.");
			break;
		
		case "Bronze": 
			System.out.println("메달의 색깔은 동메달입니다.");
			break;
		
		default:
			System.out.println("메달이 없음");
			break;
		}
	}

}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
반복문 for문
package chapter4.loopexample;

public class BreakExample1 {

	public static void main(String[] args) {
		// 반복문
		
		int sum = 0;
		int num = 0;
		
		// num 변수의 값이 0 ~ 99 범위의 누적된 값을 sum 변수에 저장
		for(num = 0; sum < 100; num++) {
			sum += num;
		}

		System.out.println("num : " + num);
		System.out.println("sum : " + sum);

	}

}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
5장 클래스와 객체

객체지향 프로그래밍

StudentVariable.java
=> main 메소드 안에 변수를 선언

package chapter5.classpart;

public class StudentVariable {
	public static void main(String[] args) {
		// 학생 정보를 저장하기 위한 변수
		int studentID; // 학번
		String studentName; // 이름
		int grade; // 학년
		String address; // 사는 곳(주소지)
		
		studentID = 1;
		studentName = "홍길동";
		grade = 4;
		address = "노원구";
		
		System.out.println("학번은? " + studentID);
		System.out.println("이름은? " + studentName);
		System.out.println("학년? " + grade);
		System.out.println("주소는? " + address);
	}
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package chapter5.classpart;

// 클래스 정의(설계)는 필드와 메서드로 구성할 수 있다.
// 클래스는 필드(변수)로 구성
// 클래스는 메서드로 구성
// 클래스는 필드와 메서드를 둘 다 구성
// 클래스는 데이터타입이다. 데이터타입 기능? 기억 장소를 형태와 크기로 생성
// 클래스를 사용할 때는 데이터타입처럼 사용하면 된다.

public class Student {
	
	// 학생 정보를 저장하기 위한 변수 	-> 필드(field)
	int studentID; // 학번
	String studentName; // 이름
	int grade; // 학년
	String address; // 사는 곳(주소지)
	
	
	// 위의 변수를 이용하여, 작업하는 기능.		메서드(method)
	// 자바스크립트의 함수 정의와 유사하다.
	public void showStudentInfo() {
		System.out.println(studentName + "," + address); // 이름 주소 출력
	}
	
	public String getStudentName() {
		return studentName;
	}
	
	public void setStudentName(String name) {
		studentName = name;
	}
	
	// 4개의 필드(studentID, studentName, grade, address)와
	// 3개의 메서드(showStudentInfo(), getStudentName(), setStudentName() 를 생성하였다.
	
	public static void main(String[] args) {
		// 클래스 사용하기

		// 변수 선언 방식 - 데이터타입 변수 이름;
		// 클래스 생성 방식 - 클래스자료형 클래수변수명 = new 클래스();

		Student stu1 = new Student(); // 기억 장소 생성
		
		stu1.studentID = 10;
		stu1.studentName = "홍길동";
		stu1.grade = 6;
		stu1.address = "노원구";
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package chapter5.classpart;

public class Person {
	// 개인정보를 관리하는 클래스
	
	// 필드 선언
	String name; // 이름
	int height; // 신장(키)
	double weight; // 몸무게
	char gender; // 성별
	boolean married; // 결혼 유무
	
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package chapter5.classpart;

public class PersonTest {
	public static void main(String[] args) {
		// Person 클래스 사용 - Person 객체 생성
		// 클래스 사용 방법 - 클래스명 변수명 = new 클래스명();
		
		Person ps1 = new Person(); // 기억 장소 생성
		Person ps2 = new Person(); // 기억 장소 생성
		Person ps3 = new Person(); // 기억 장소 생성
		
		
	}
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

프로젝트 : 쇼핑몰(docmail.com)

#쇼핑몰

- 회원
필드 : 아이디, 비밀번호, 이름, 나이, 주소
메서드 : 회원가입, 회원 삭제, 회원 수정, 아이디 중복 체크

- 상품
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package chapter5.docmall;

// 회원 관리 클래스
public class Member {
	// 필드
	String userId;
	String passwd;
	String name;
	int age;
	String addr;
	
	// 메서드
	// 가입 기능
	public void join() {
		
	}
	
	// 수정 기능
	public void modify() {
		
	}
	
	// 삭제 기능
	public void delete() {
		
	}
	
	// 아이디 중복 체크
	public boolean idCheck() {
		return true;
	}
	
	public boolean pwCheck() {
		return true;
	}
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package chapter5.classpart;

public class Product {
	String p_name;
	int p_code;
	int p_price;
	String p_desc;
	int p_pty;
	
	// 메서드 : 상품을 통한 기능
	// 상품 등록
	public void register() {
		
	}
	
	// 상품 수정
	public void modify() {
		
	}
	
	// 삭제 기능
	public void delete() {
		
	}
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package chapter5.methodpart;

public class Person {
	// 개인정보를 관리하는 클래스
	
	// 필드 선언
	String name; // 이름
	int height; // 신장(키)
	double weight; // 몸무게
	char gender; // 성별
	boolean married; // 결혼 유무
	
	// 메서드 : 자바스크립트의 함수와 유사
	// 유형 : 4개
	// 기본 문법
	/*
	 	접근자 리턴타입 메서드명 (매개변수, ...){
	 	
	 	}
	 	
	 	접근자 : public 

	 */
	
	// 1) 매개변수가 없고, 리턴값이 없는 메소드
	public void print_name() { // name을 출력하는 메서드
		System.out.println("이름은? " + name);
	}
	
	// 2) 매개변수가 없고, 리턴값이 있는 메서드
	public String getName() {
		return name;
	}
	
	// 3) 매개변수가 있고, 리턴값이 없는 메소드
	public void setWeight(double w){
		weight = w;
	}
	
	// 4) 매개변수가 있고, 리턴값이 있는 메서드 (몸무게가 100 이상이면 true, 아니면 false)
	public boolean isWeight(double w){
		
		if(w >= 100) {
			return true;
		}else {
			return false;
		}
	}
	
}

~~~~~~~~~~~~~~~~~~~~~~~~
package chapter5.methodpart;

public class PersonTest {

	public static void main(String[] args) {
		// Person 클래스 사용
		Person ps1 = new Person(); // 기억 장소 생성
		ps1.name = "홍길동";
		ps1.height = 180;
		ps1.weight = 80;
		ps1.gender = 'M';
		ps1.married = true;
		
		//메소드 사용
		ps1.print_name(); // 리턴 타입이 없다.
		String name = ps1.getName();
		ps1.setWeight(100);
		boolean result = ps1.isWeight(85);
	}

}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package chapter5.methodpart;

public class Person {
	// 개인정보를 관리하는 클래스
	
	// 필드 선언
	String name; // 이름
	int height; // 신장(키)
	double weight; // 몸무게
	char gender; // 성별
	boolean married; // 결혼 유무
	
	// 메서드 : 자바스크립트의 함수와 유사
	// 유형 : 4개
	// 기본 문법
	/*
	 	접근자 리턴타입 메서드명 (매개변수, ...){
	 	
	 	}
	 	
	 	접근자 : public 

	 */
	
	// 1) 매개변수가 없고, 리턴값이 없는 메소드
	public void print_name() { // name을 출력하는 메서드
		System.out.println("이름은? " + name);
	}
	
	// 2) 매개변수가 없고, 리턴값이 있는 메서드
	public String getName() {
		return name;
	}
	
	// 3) 매개변수가 있고, 리턴값이 없는 메소드
	public void setWeight(double w){
		weight = w;
	}
	
	// 4) 매개변수가 있고, 리턴값이 있는 메서드 (몸무게가 100 이상이면 true, 아니면 false)
	public boolean isWeight(double w){
		
		if(w >= 100) {
			return true;
		}else {
			return false;
		}
	}
	
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

package chapter5.methodpart;

// 계산 기능 클래스
public class Calc {
	int num1;
	int num2;
	
	// 메서드 명 : printAdd, 리턴값이 없고, 두 변수값을 더해서 출력하는 예제
	public void printAdd() {
		System.out.println(num1 + num2); 
	}
	
	// 메서드명 : getAdd, 리턴값이 있고, 두 변수값을 더해서 값을 리턴
	public int getAdd() {
		return num1 + num2;
		
	}
	
	// 메서드명 : getNum, 리턴값이 있고 리턴값은 num1 변수의 값을 리턴
	public int getNum() {
		return num1;
	}
	
	// 메서드명 : setNum, 리턴값은 없고, 매개변수 n1, n1을 num1 변수에 값을 저장
	public void setNum(int n1) {
		num1 = n1;
	}
	
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package chapter5.methodpart;

public class Operator {
	int x;
	int y;
	
	// x, y의 두 변수를 사용하여, 덧셈, 뺄셈, 곱셈, 나눗셈의 결과를 리턴하는 메서드를 정의.
	
	// 덧셈 : plus 리턴값 : int 매개변수 없음
	public int plus() {
		return x + y;
	}
	
	// 뺼셈 : minus 리턴값 : int 매개변수 없음
	public int minus() {
		return x - y;
	}
	
	
	// 곱셈 : multiply 리턴값 : int 매개변수 없음
	public int multiply() {
		return x * y;
	}
	
	
	// 나눗셈 : divide 리턴값 : double 매개변수 없음
	public double divide() {
		return x / (double)y;
		// return (double) (x/y);
	}
	
	// 메소드명 : setX 리턴값이 없고, 매개변수 a 	a변수의 값을 x에 대입
	public void setX(int a) {
		x = a;
	}
	
	// 메소드명 : setY 리턴값이 없고, 매개변수 b 	b변수의 값을 y에 대입
	public void setY(int b) {
		y = b;
	}
	
	// x, y의 두 변수를 사용하여, 덧셈, 뺄셈, 곱셈, 나눗셈의 결과를 출력하는 메서드를 정의.
	// 공통 사항 : 리턴값이 없다. 매개변수도 없다.
	// 덧셈 출력 : print_plus
	// 뺄셈 출력 : print_minus
	// 곱셈 출력 : print_multiply
	// 나눗셈 출력 : print_divide

	public void print_plus(){
		System.out.println(x+y);
	}

	public void print_minus(){
		System.out.println(x-y);
	}

	public void print_multiply(){
		System.out.println(x*y);
	}

	public void print_divide(){
		System.out.println(x/y);
	}
	
	
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
클래스와 인스턴스

package chapter5.classpart2;

// 학생 정보를 관리하는 클래스
public class Student {
	// 학번
	int studentID;
	// 이름
	String studentName;
	// 학년
	String grade;
	// 주소
	String address;
	
	// 학생 이름을 리턴하는 메서드
	public String getStudentName() {
		return studentName;
	}
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package chapter5.classpart2;

public class StudentTest {

	public static void main(String[] args) {
		// 
		Student st1 = new Student();
		
		/*
		 Student stu1;
		 stu1 = new Student; 
		 */
		
		
		st1.studentID = 1; 
		st1.studentName = "홍길동";
		st1.grade = 3;
		st1.address = "노원구";
		
		st1.getStudentName();

	}

}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
자바 프로그램 실행 149page (그림 참고)
- 메모리 사용
Student stu1;
stu1 = new Student();

1) 스택 영역

2) 메서드 영역


3) 힙 영역
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

W3Cschool - Java Data Types
