병합
1) fast forward - 혼자 개발할 때 사용
8.2 fast-forward 병합
순차적으로 커밋에 맞춰서

$git checkout main
$git merge feature


2) 3-way 주로 협업 개발시 사용
8.3 3-way 병합
병합 커밋이 생성됨.

fast forward 
- 순차적으로 커밋에 맞추어 병합을 처리하는 방법

git log로 commit 로그 5글자를 알아낸 후

$git checkout (commit로그 5글자)
-> 사용시 그때 커밋 로그로 돌아감

fast forward 그림 8-9 병합을 할 수 있게 브랜치 이동
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

$git checkout -b hotfix
$code index.html
$git commit -am "add footer"
$code index.html
$git commit -am "add copyright"

git checkout main
git merge hotfix

hotfix

브랜치 관리기법 : 깃 플로(git flow)
- 수많은 브랜치작업을 규격화해서 브랜치를 쉽게 다룰 수 있도록 하는 전략 정도
- 깃 플로 : main

브랜치 삭제 : git branch -d hotfix

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
8.5 충돌

대표적으로 여러 사람과 개발한 코드 일부분이 충돌(complicit)하는 경우가 있다.
보통 충돌은 3-way 병합이 실패한 경우입니다.

충돌 만들기 8.5.2

$git commit -am "edit footer"
ㅡㅡㅡ
디렉토리 (main|merging) ---> 충돌 오류가 남

(head)
copyright all right 2024 reserved by 손흥민
(footer)
copyright all right 2018 reserved by 이순신

1번 accept current -> 손흥민 ->이전의 것만
2번 accept incoming -> 이순신 -> 후의 것만
3번 accept both -> 손흥민 이순신 -> 둘 다
4번 compare changes비교 -> 수동으로 수정


코드를 수정하고 add 후 커밋하면 충돌이 고쳐짐

$git branch --merged
병합한 것을 확인함

충돌 
하나의 파일에 같은 위치에 코드가 동시에 수정이 되면 충돌이 발생
병합하다가 충돌로 인하여 병합이 실패되고, 그 원인을 수동으로 해결

- 병합한 브랜치 정보 : git branch --merged
- 병합하지 않은 브랜치 정보 : git branch --no --merged
ㅡㅡㅡㅡㅡㅡ
8.7 리베이스(rebase)
실무에서는 merge명령어보다는 커밋을 재배열하는 리베이스를 선호한다.

8-33 브랜치와 기준 커밋
	vs
8-34 베이스 이동
	vs
8-35 3-way 병합
