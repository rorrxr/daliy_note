Java 프로그래밍 - 깃허브 : https://github.com/easyspubjava/JAVA_LAB / http://www.easyspub.co.kr/30_Menu/DataList/PUB

1장 자바 프로그래밍 시작하기 

컴퓨터 작업 : 0과 1의 2진수 형태의 기계어로 해석할 수 있다.

자연어의 종류 : C, C++, C#, Java 등

Java ----------> 컴파일(Compile)	------------> 기계어
사람				     컴퓨터

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
컴파일 과정 예시

사람 : 1부터 10까지 더해줘 -> 프로그래밍 언어로 소스코드 작성 -> 
컴파일러가 컴퓨터가 알아듣도록 번역 -> 프로그램 실행

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
사람이 입력한 것을 컴퓨터가 알아들을 수 있게 해석하는 과정을 컴파일이라고 한다.

컴파일러(Compiler) : 기계어로 변환하는, 즉 컴파일 작업을 하는 프로그램이다.
언어별로 컴파일러 프로그램이 존재한다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
20 page 자바를 쓰면 좋은 이유

장점 1. 자바는 플랫폼에 영향을 받지 않으므로 다양한 환경에서 사용할 수 있다.
예시로 C언어로 개발한 프로그램이 있다면, 운영체제마다 새로 만들어야 한다.


C 소스 코드

ㄴ	Windows 운영체제
	C언어 - 윈도우 컴파일 작업 -> 결과 소스

ㄴ	Linux 운영체제
	리눅스 실행 파일 -> 리눅스에서 실행

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

자바 소스 -> 컴파일러 -> 바이트코드 (중간 기계어)

자바는 컴파일을 하면 '바이트코드' 라는 실행 파일을 만든다. (예시: Example.exe)
이 바이트코드는 100% 기계어가 아닌 중간 기계어이다.
이 차이로 C언어와 다르게 바로 기계어로 되지 않기 때문에 운영체제에 맞게 실행이 된다.

바이트코드를 실행하려면 운영체제에 맞는 자바 가상 머신(JVM)이 필요하다.

운영체제에서 직접 실행하는 것이 아니라 가상 머신에서 먼저 실행한다.
이 가상머신이 운영체제에 맞는 완벽한 실행파일로 바꿔서 만들어 준다.

=> .class 파일을 만들어두면 운영체제에 맞는 가상머신을 이용하여 어느 환경에서나 실행할 수 있다.

+) 나머지 장점 2. 3. 4

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

자바 JDK(Java Development Kit) : 자바 프로그래밍 명령어와 관련 프로그램으로
자바 프로그램을 개발하는 데 필요한 라이브러리와 플랫폼이 포함되어 있다.

Oracle JDK는 상업적 이용을 할 경우 유료이기 때문에, 
무료로 이용하고자 할 경우 Oracle의 OpenJDK 빌드 또는 Zulu JDK, AdoptOpenJDK 등의 
OpenJDK 기반 빌드를 이용하여야 한다.

JDK 설치
IDE : 소스 코드를 작성하는 통합 개발환경 프로그램을 뜻한다.
IDE 예시 : Visual Studio Code, 인텔리 J, 이클립스 등이 있다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
명령 프롬포트로 확인

C:\Program Files\Java\jdk-17\bin> dir java*.exe

java.exe
javac.exe
javadoc.exe
javap.exe
javaw.exe를 확인할 수 있다.

path 경로에


C:\Program Files\Java\jdk-17\bin> javac -version

javac의 버전을 확인할 수 있다.


#javac -> java 프로그램을 컴파일 하는 프로그램


#LTS : 

ㅡㅡㅡㅡㅡㅡㅡ

이클립스 다운로드 및 생성

workspace : 작업한 자바 소스코드를 관리하는 폴더

이클립스도 jdk 지원 버전이 존재한다.

jre -> JAVASE-17
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
~@ 직접 자바 소스 코드 파일 컴파일 하기~
1. 메모장에 소스 코드 작성
package hello;

public class HelloJava {

	public static void main(String[] args) {
		System.out.println("Hello, Java");
	}

}

2. 명령 프롬포트에 javac 파일명.java 으로 컴파일 한다
컴파일을 하게 되면 이전에 없던 java 파일명.class 파일이 생성된다.

이 파일이 앞서 말했던 바이트코드이다.
바이트코드로 운영체제에 맞게 실행할 수 있게 된다

3. java 파일명 으로 프로그램을 실행한다

# 소스 코드가 수정될 때마다 javac, java를 사용하여 계속 갱신해줘야 한다.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

이클립스는 Run의 기능은 컴파일러(javac.exe), 실행(java.exe) 기능을 알아서 처리해준다.

따라서 위의 과정보다 편하게 컴파일과 실행할 수 있어서 개발 속도를 빠르게 하여 향상시킬 수 있다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

주석 : 컴파일러가 해당 내용을 해석하지 않는다. 
따라서 코드에 대한 설명을 적어주면 다른 사람이 보기에 코드를 이해하기 좋다.
또한, 특정 코드가 컴파일 되지 않도록 처리하기도 한다.

// 한줄 주석
/**/ 여러줄 주석

ㅡㅡㅡㅡㅡㅡㅡㅡ

1장 자바 프로그래밍 시작하기 정리

1. 프로그램(코드)를 기계가 이해할 수 있는 언어로 바꾸는 작업을 (컴파일러)라고 합니다.
2. (객체지향 언어)는 자바나 C++와 같이 대상이 되는 객체를 기반으로 프로그램을 구현하는 언어입니다.
3. 자바로 만든 프로그램은 (자바가상머신)이 설치되어있으면 운영체제와 상관없이 실행할 수 있다.
4. 자바 개발을 위해 설치하는 자바 라이브러리 "jdk"라고 합니다.
5. 자바 프로그램이 실행되는 자바 실행 환경을 "jre"라고 합니다.
6. 두 번째 자바 프로그램을 만들어 보세요. 이클립스에서 "Hello.java" 대신 본인의 이름을 출력해 보세요.
 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

2장 변수와 자료형

# 변수 : 기억 장소를 가리키는 이름.
# 데이터 타입(자료형)
-> 데이터타입 기능이란 메모리상에 기억장소를 크기와 형태로 생성
-> 크기 : 1Byte, 2Byte, 4Byte, 8Byte
-> 형태 : 정수형, 실수형, 논리형, 문자형

-> 참고 자료 : W3CSchool Java Data Types		
정수형 : byte(1byte), short(2byte), int(4byte), long(8byte)
실수형 : float(4byte), double(8byte)
논리형 : boolean(1 bit)
문자형 : char(2 Byte)

정수 데이터 타입 : byte < short < int < long 
번외 > char

bit * 8개 = 1 byte
1 byte * 4 =  32 bit
1 byte * 1024 = 1kbyte
1kbyte * 1024 = 1gbye


~~ 자바 변수 선언 방법~~~

자바에서 변수 선언을 하는 방법은 "데이터타입 변수명"으로 변수를 정의한다.

예시로 4byte 크기의 숫자 데이터를 담아두는 정수형 형태의 변수명 level를 선언하고자 한다면,
int level;	이라고 작성하여 선언한다.
~~~~~~~~
자바 변수 선언 예시 소스 코드 - Variable.java

int level; // 변수 선언 (변수 정의)
level = 10;

= int level = 10; // 한줄로 선언도 가능

// System.out.println(); - ()안에 데이터 또는 변수 값을 출력하는 기능.
System.out.println(level);

~~~~~~~~~

데이터 타입 
# byte형 - 1) 정수형 2) 크기 : 1byte 3) 범위 - 128 to 127
byte 변수 선언 - ByteVariable.java

byte bs1 = -128;
// byte bs2 = 128; byte 데이터 값의 범위에서 초과되어 에러가 발생한다.

ㅡㅡㅡ
중요 : 변수끼리 연산이 발생되면, 변수의 크기가 int형보다 작은 데이터 타입이라면,
int 데이터 타입으로 형변환이 발생된다.

50p 자료형이 다른 정수끼리 더하면 어떻게 될까? IntegerVariable.java

// 정수 데이터 타입 : byte < short < int < long 		번외 > char

short sVal = 10;
byte bVal = 20;
		
// sVal과 bVal 변수가 int형으로 변환이 된다. 
System.out.println(sVal + bVal); // short + byte -> int + int = int 결과
				
ㅡㅡㅡㅡㅡㅡㅡㅡ
// int 데이터 타입 - 1) 정수형 2) 크기 : 4byte 3) 범위 -2,147,483,648 ~ 2,147,483,647
// 정수 자료형으로 int형을 가장 많이 사용하는 이유는 컴퓨터에서 정수로 연산을 할 때 4바이트 단위로 처리하는 것이 효율적이기 떄문이다.

IntegerVariable1.java
// 정수형 int형 변수 iVal_1, iVal_2 선언한다.
// 정수값을 사용시 데이터타입은 int형을 기본으로 한다.
int iVal_1 = 10; // iVal_1 변수에 10을 저장한다.
int iVal_2 = 20; // iVal_2 변수에 20을 저장한다.
		
// 정수형 int형 변수 result에 iVal_1 값과 iVal_2 값을 더한 값을 저장한다.
int result = iVal_1 + iVal_2;
		
System.out.println(result); // result 값을 출력한다.
ㅡㅡㅡ
OverflowEx.java
		// int형 범위 : -2,147,483,648 ~ 2,147,483,647 	총 10자리
		// 자바에서는 숫자를 사용하면, int형 데이터로 기본으로 인식한다.
		// 값의 범위가 int 범위보다 크면 에러가 발생되어, 값에 뒤에 접미사 L OR l을 붙이면 long형 데이터로 사용할 수가 있다.
		// int num1 = 1234567890; // 11자리라서 값이 int형 범위를 초과하여 오류가 발생한다.
		long num2 = 123456789000L; // long은 int형보다 더 많은 값의 범위의 값을 저장할 수 있기 때문에 오류가 발생하지 않는다. 

ㅡㅡㅡㅡㅡ
CharacterEx.java
// char 데이터 타입(2Byte) : 문자 1개를 저장하는 기억 장소 생성.
		
// 1개의 문자를 표현 시 반드시 '' 작은 따옴표를 감싸야 한다.
// 실제 기억장소에는 코드(ascii code, uni-code)값으로 저장된다.
		
char ch1 = '한'; // 두글자 쓰게 된다면 오류가 발생한다.
char ch2 = '\ud55C'; // \\u 유니코드 D55C 16진수값

System.out.println(ch1);
System.out.println(ch2);

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

charaterex3.java

package chapter2;

public class CharaterEx3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// char 데이터타입 값 범위 0 ~ 65535
		
		int a = 65;
		int b = -66;
		
		char a2 = 65; // 문자로 사용한다.
		// char b2 = -66; //값의 범위 이내에 해당하지 않아 에러가 발생한다.
		
		System.out.println(a);
	}
}


https://tcpschool.com/cpp/cpp_datatype_floatingPointNumber
부동 소수점 방식
~~~~~~~~~~~~~~~~~~~~
doubleex1, doubleex2, booleanex.java
~~~~~~~~~~~~~~~~~~
		// 상수 선언하기. 상수 이름은 대문자로 사용한다 (관례) 반대로 변수 이름은 소문자로 사용한다.
		// 변수와 의미가 다르다. 차이점을 공부해야 한다.
		
		// int MAX_NUM = 100; // 변수
		final int MAX_NUM = 100; // 상수
		
		// MAX_NUM = 1000; 상수값은 변수와 다르게 변경할 수 없다.
		
		final int MIN_NUM;
		
		MIN_NUM = 0;

		System.out.println(MAX_NUM);
		System.out.println(MIN_NUM);
~~~
상수
~~
형변환
묵시적 형변환
명시적 형변환
~~~
연산자
-산술연산자 +, -, *, / 
OperationEx1.java