GIT 형상관리
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
$git --version 
-> git의 버전을 확인

$git config --global user.name
-> git 유저의 이름을 확인

$git config --global user.email
-> git 유저의 이메일을 확인

$mkdir (폴더 이름)
-> 폴더를 새로 생성한다.

더북 -> 깃 개념 잡기 (초기화)

$git init
->저장소 초기화

$git init . 
=> 현재 폴더를 의미하는 .을 사용할 수 있다


더북 3.1.3 숨겨진 폴더 = .git 폴더

$ls
-> 파일 목록을 출력하는 리눅스 명령어

$ls -a
-> 폴더 안의 숨겨진 파일을 같이 출력하여 확인할 수 있다.

$ls -all
-> 현재 폴더 안에 내용을 자세히 볼 수 있다.

// 숨겨진 폴더까지 같이 복사하려면 일반적인 cp 명령어로는 할 수 없습니다. -r 옵션을 사용해야 숨겨진 폴더도 함께 복사됩니다.

// $ cp -r 원본폴더 복사폴더

$code (코드 파일명.확장자), 예시 : $code index.html
->코드를 생성하기 위해 연결된 소스코드 프로그램이 실행한다.

$git status
-> 파일들의 스테이지 상태를 확인한다
->git ls -files --stage 같은 명령어로도 확인할 수 있다.

$git add (파일명)
->git에 파일을 등록하는 명령어이다.

깃 그림 3-18 워킹 디렉터리와 스테이지 상태 구분

$git rm --cached index.html
-> 원상태로 돌아옴

git은 커밋을 관리하는 것이 목적이다.

$git commit -m "메시지 내용"
-> 현재 git에 커밋한다. -m 뒤에 메시지 내용으로 

$git log
커밋 로그 확인

$git add .
스테이지 모든 파일을 입력한다.

$git -am "two commit"

$git add index.html

$git commit -m "메시지"
$git commit -am "메시지"

# github에 원격 리포지터리를 사용하는 목적
- 백업용 : 사무실 컴퓨터에서 작업하다가 깃헙에 소스를 올리고, 집에 와서 컴퓨터로 받아서 작업을 하는 경우.
- 팀 협업 : 프로젝트 소스를 공유 목적
- 깃 허브 : 깃 호스팅 사이트

$echo "# work1" >> README.md
-> readme.md 파일을 만든다

git config --global core.autocrlf true // widnow
git config --global core.autocrlf input// macOS이나 Linux
-> 운영체제에서 줄바꿈 발생시 windows에서는 text\r\n
linux, mac = text\n
문제가 발생되지 않기 위하여 설정

git add README.md

rm (파일명)
-> 파일 강제 삭제

$ git restore --staged README.md

$ git remote add origin (원격 레포터리지 주소)
-> 원격 레포터리지와 연결함 (첫 1회만)

-- 원격 연결정보 확인
git remote
git remote -v

push : 로컬 저장소(데이터, 커밋정보)를 원격 저장소로 올리는 작업
fetch : 원격 저장소(데이터, 커밋정보)를 로컬 저장소로 받는 작업

push작업
- push 직업이 처음이면, 인증키 생성하여, 인증작업을 해야 한다.
다음부터는 인증요청 작업없이 push가 진행될 수 있다.

git push origin main
-> git에 commit을 저장함

-원격리포지터리 다운 : .git 저장소가 존재하지 않는다.
-원격리포지터리 복제(clone) : .git 저장소가 포함되어 있음
$git clone (원격리포지터리 주소) : 현재 폴더에 복제
$git clone (원격리포지터리 주소) work100 : work100 폴더에 복제

리눅스
파일과 폴더를 구분시
ls -all

앞에 10자리에서 첫번째 자리가 d폴더 - 파일을 의미함

5.5.2 pull : 서버에서 내려받기


앞에 10자리에서
첫번쨰 자리가 d폴더 - 파일을 의미함
나머지 9자리 rwxrwxrwx 권한
r : read w:write x : execution

work1폴더이동
sever.html 수정 : <h3>내용이 추가되었습니다.2</h3>

commit : server.html append2
push

work1_clone 폴더 이동
git log
pull로 반영
git log

clone vs pull 비교
- clone : 깃헙에 원격 리포지터리를 로컬에 복사하는 의미
- pull : 로컬 저장소가 생성된 상태에서 원격 리포지터리의 변경된 정보를 내려받는 것

원격 저장소 내용을 내려받는 방법은 크게 두가지이다.

pull :
	원격 저장소에서 데이터와 커밋 정보를 로컬 저장소로 내려받아
	로컬 저장소에 있는 데이터와 커밋 정보에 병합(merge)을 자동으로 함
fetch :
	원격 저장소에서 데이터와 커밋 정보를 로컬 저장소로 내려받아
	로컬 저장소에 있는 데이터와 커밋 정보를 병합(merge)를 하지 않고, 로컬에 존재만 하는 상태
	병합(merge)작업을 수동으로 명령어를 통하여 해야 함.

5.7.2 충돌방지 
권장순서 5-10
pull -> coding-> commit-> pull-> push

6장 브랜치

브랜치(Branch) : 프로젝트를 진행하다 보면, 독립적인 기능이 추가 또는 기존 소스의 대량 변경 작업 등이 발생될때
	         현재까지의 안정된 소스를 버전관리하고, 추가 또는 변경소스를 따로 관리하는 목적

git branch : 브런치 목록확인

- 브랜치 생성 : git branch 브랜치이름
	     : 브랜치가 생성될 때마다 기존 브랜치를 복사한다. 
	       그 증명으로 git rev-parse 브랜치이름 명령어를 통하여, 해쉬코드값이 동일함을 알 수가 있다. 

- 브랜치 변경(이동) : git checkout 브랜치이름

- 브랜치 해쉬코드값 확인 : git rev-parse 브랜치이름

- 브랜치 세부사항 : git branch -v

- 이전 브랜치 이동 : git checkout -

- 브랜치 이동 시 주의사항
	1) 현재 브랜치에서 작업 사항을 잊고, 다른 브랜치로 이동하면 안 된다.
	즉, 현재 브랜치에서 작업을 완료(commit) 또는 작업 디렉토리가 clean 상태여야 한다.

8.2.1 브랜치 생성과 수정 작업

- 브랜치 로그

	git log --graph --all : 그래픽 효과를 통한 전체로그 출력

6.7.4 상대적 위치

head ^ / head ^^
혹은
head~ / head~~
-> 바로 이전의 커밋을 뜻함
// ^(캐럿) ~(물결)
// ^^ / ~~ ----> 이전 이전
// ^ / ~ ---> 이전
head^3 또는 head~3으로도 표현 가능

6.4
- 브랜치 삭제 - git branch -d 브랜치이름
- 브랜치 강제 삭제 : git branch -D 브랜치이름
작업 프랜치에 워킹 디렉토리 또는 스테이지에 추가 커밋작업이 남아있으면 브랜치가 삭제가 된다.

8장 병합과 충돌
깃은 언제든지 새로운 작업을 할 수 있는 브랜치를 만들 수 있습니다. 
브랜치는 원본을 유지한 채로 새로운 기능을 개발하거나 버그를 수정하는 작업을 할 수 있는 기능이다.

full - 자동병합
fetch - 수동병합

quick guide
-fast forward 병합
-3way 병합
-병합

#병합
브랜치를 생성하는 목적은 원본 코드에 영향을 주지 않고 분리하여 개발하기 위해서입니다. 
독립된 브랜치에서 개발 작업이 끝나면 다시 원본 브랜치에 작업한 결과를 반영해야 합니다. 
분리된 브랜치를 한 브랜치로 합치는 작업을 병합(합치기)이라고 합니다.  

브랜치 병합 - fast forward, 3-way
1)Fast-forward병합
Fast forward 병합은 병합할 하나의 브랜치 파일을 기준 브랜치로 복사하여 수정된 파일을 워보에 그대로 적용한 것
main -> feature 병합

2)3-way병합
git checkout -b hotfix
git branch hotfix
git checkout hotfix

git checkout main
git merge hotfix


8.4.1 브랜치 삭제 - 병합 후 삭제

$git checkout - hotfix
$git merge branch hotfix -> 병합
$git log -1
-> 앞의 로그만 볼 수 있다.

병합 취소
$git reset --hard HEAD^ -> 이전 단계로 커밋하고 변경한다.
$git merge hotfix --edit -> vs code틀에서 메시지 작성 후 저장

브랜치 관리기법 : 깃 플로(git flow)
- 수많은 브랜치 작업을 규격화해서 브랜치를 쉽게 다룰수 있도록 하는 전략 정도
- 깃 플로 : main(master), feature, develop, release, hotfix 브랜치 종류가 있다.
이 중에서도 develop 브랜치는 main(master)브랜치에 병합한 후에도 삭제하지 않고, 계속 유지한다.

- 브랜치 삭제 : git branch -d hotfix